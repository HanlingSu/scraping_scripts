#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on March 10 2023

@author: bhumika

This script updates www.agniban.com
 
"""
# -*- coding: utf-8 -*-
"""sparsh_agniban.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FSr65gify-RJ9SLRINzHE6N6bCVPuTaM
"""
"""
!pip install beautifulsoup4
!pip install lxml
!pip install xmltodict
!pip install news-please
"""

# db connection:

import requests
from bs4 import BeautifulSoup
import json
import xmltodict
import os
from newsplease import NewsPlease
from datetime import datetime
from pymongo import MongoClient

import random
import sys
sys.path.append('../')
import os
import re
from pymongo import MongoClient
from urllib.parse import urlparse
from datetime import datetime
from dateutil.relativedelta import relativedelta
from pymongo import MongoClient
from pymongo.errors import DuplicateKeyError
from pymongo.errors import CursorNotFound
import requests
from newsplease import NewsPlease
from dotenv import load_dotenv
from bs4 import BeautifulSoup
import dateparser
import pandas as pd

import math

db = MongoClient('mongodb://zungru:balsas.rial.tanoaks.schmoe.coffing@db-wibbels.sas.upenn.edu/?authSource=ml4p&tls=true').ml4p
# main_url = "https://www.agniban.com"
# sitemap = "https://www.agniban.com/category-sitemap.xml"
# headers = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'}
# source = 'agniban.com'


# def process_category_agniban(category_url):
#     ### extract article URLs
#     article_urls = []
#     process_page_agniban(category_url, article_urls)

#     article_data = []
#     for url in article_urls:
#         url_data = agniban_story(url)
#         article_data.append(url_data)
#     return article_data

# def process_page_agniban(page_url, article_urls, i = 1):
#     #assert i < 3
#     response = requests.get(page_url)
#     if response.status_code == 200:
#         soup = BeautifulSoup(response.content, "html.parser")
#         for article_block in soup.find_all("h2", {"entry-title"}):
#             sub_soup = BeautifulSoup(str(article_block), "html.parser")
#             links = sub_soup.find_all("a")
#             for link in links:
#                 article_urls.append(link["href"])

#         ### Recursively work on next page if exists
#         next_pages = soup.find_all("a", {"next"})

#         if (len(next_pages) == 0):
#             return
#         else:
#             next_url = next_pages[0]["href"]
#             try:
#                 process_page_agniban(next_url, article_urls, i+1)
#             except:
#                 return

#     else:
#         raise ValueError("Not a valid URL")

# def agniban_story(page_url):
#     response = requests.get(page_url)
#     soup = BeautifulSoup(response.content, "html.parser")
#     hold_dict = {}
#     hold_dict["raw_response"] = response.content
#     hold_dict["response_text"] = response.text
#     # Get url
#     hold_dict['url'] = page_url
#     # Get Title:
#     try:
#         article_title = soup.find("h1", {"class":"entry-title"}).text
#         #article_title = article_titlec["content"]
#         hold_dict['title']  = article_title
#     except:
#         hold_dict['title']  = None

#     # Get Main Text:
#     try:
#       text = soup.find("div", {"class": "entry-content"}).text
#       split_text = text.split("\n\t\t\n\n\t\t\n\t\tShare:\nLeave a Comment\n\n\n\n\n")[0]
#       hold_dict['maintext'] = split_text
#     except:
#         hold_dict['maintext'] = None
#     # Get Date
#     try:
#         containsdate = soup.find("time",{"class":"entry-date published updated"}).text
#         hold_dict['date_publish'] = containsdate
#     except Exception as err:
#         hold_dict['date_publish'] = None
#         print("Error when trying to get the date", err)
#     return hold_dict

# def clean_url(sitemap_URLs) :
#     blpatterns = ['lifestyle/', '/sport/', '/entertainment/','/auto/', '/job/', '/uncategorized/',
#                    'religion-astrology/', 'puzzle/', 'blogger/', 'yaas/', 'business/', 'shorts/', 'video/']
#     clean_urls = []
#     for url in sitemap_URLs:
#         if url == "" or url == None:
#             continue

#         for pattern in blpatterns:
#             if pattern in url:
#                 break
#         else:
#             if not "https://www.agniban.com/" in url and not "https:" in url:
#                 url = "https://www.agniban.com/" + url
#             clean_urls.append(url)
#     print('Now collected ',len(clean_urls), ' clean inner URLs')
#     return clean_urls

# def extract_url_information(category_urls):
#     final_section_data = []
#     final_section_incorrect_data = []
#     url_count = 0
#     for link in category_urls:
#       store = process_category_agniban(link)
#       for element in store:
#         article = NewsPlease.from_html(element["response_text"], url=element["url"]).__dict__

#         assert article["url"] == element["url"]
#         article['date_download'] = datetime.now()
#         article['download_via'] = "LocalIND"
#         article['source_domain'] = source
#         try:
#           article['date_publish'] = element['date_publish']
#           article['title'] = element['title']
#           article['maintext'] = element['maintext']
#           article['url'] = element["url"]
#           final_section_data.append(article)
#           try:
#             date = datetime.strptime(element["date_publish"], '%b %d, %Y')
#             year = date.year
#             month = date.month
#             colname = f'articles-{year}-{month}'
#           except:
#             print("NO DATE : ", element["url"])
#             colname = 'articles-nodate'
#           try:
#             url_count = url_count + 1
#             # Inserting article into the db:
#             db[colname].insert_one(article)
#             print(" + Date: ", article['date_publish'], " + Main Text: ", article['maintext'][0:50], " + Title: ", article['title'][0:25])
#             print("Inserted! in ", colname, " - number of urls so far: ", url_count)
#             db['urls'].insert_one({'url': article['url']})
#           except DuplicateKeyError:
#               print("DUPLICATE! Not inserted for section clean url : ", link)
#         except Exception as err:
#                 print("Exception in section clean url : ", link)
#                 final_section_incorrect_data.append({'url': link, "err": err})
#                 print("ERRORRRR......", err)
#     return final_section_incorrect_data, final_section_data


# response = requests.get(sitemap)
# category_urls = []
# if response.status_code == 200:
#     sitemap_content = response.text
#     category_urls = [x["loc"] for x in xmltodict.parse(sitemap_content)["urlset"]["url"]]
# else:
#     raise Exception("Problem")

# category_urls = clean_url(category_urls)
# extract_url_information(category_urls)


# # Packages:
# import random
# import sys
# sys.path.append('../')
# import os
# import re
# # from p_tqdm import p_umap
# from tqdm import tqdm
# from pymongo import MongoClient
# import random
# from urllib.parse import urlparse
# from datetime import datetime
# from dateutil.relativedelta import relativedelta
# from pymongo.errors import DuplicateKeyError
# from pymongo.errors import CursorNotFound
# import requests
# #from peacemachine.helpers import urlFilter
# from newsplease import NewsPlease
# # from dotenv import load_dotenv
# from bs4 import BeautifulSoup
# # %pip install dateparser
# import dateparser
# import pandas as pd

# import math


# # db connection:
# db = MongoClient('mongodb://zungru:balsas.rial.tanoaks.schmoe.coffing@db-wibbels.sas.upenn.edu/?authSource=ml4p&tls=true').ml4p

# # headers for scraping
# headers = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'}

# ## NEED TO DEFINE SOURCE!
# source = 'agniban.com'

# def agniban_story(soup):
#     hold_dict = {}

#     # Get Title:
#     try:
#         article_title = soup.find("h1", {"class":"entry-title"}).text
#         #article_title = article_titlec["content"]
#         hold_dict['title']  = article_title
#     except:
#         hold_dict['title']  = None

#     # Get Main Text:
#     try:
#         hold_dict['maintext'] = soup.find("div", {"class": "entry-content"}).text
#     except:
#         hold_dict['maintext'] = None

#     # Get Date
#     try:
#         containsdate = soup.find("time",{"class":"entry-date published updated"}).text
#         hold_dict['date_publish'] = containsdate
#     except Exception as err:
#         hold_dict['date_publish'] = None
#         print("Error when trying to get the date", err)

#     return hold_dict

# def sitemap_to_url(sitemap, headers):
#     req = requests.get(sitemap, headers = headers)
#     soup = BeautifulSoup(req.content)
#     soup_loc = [loc.text for loc in soup.find_all('loc')]
#     sitemap_URLs = []
#     for i in soup_loc:
#       req_section = requests.get(i, headers = headers)
#       soup_section = BeautifulSoup(req_section.content)
#       page_numbers = soup_section.find('div', {'nav-links'})
#       if page_numbers:
#           page_numbers = page_numbers.find_all('a', {'page-numbers'})
#           page_max = page_numbers[-2].text.replace(',', '') if page_numbers else '1'
#           page_max = int(page_max)
#           for page in range(1,page_max+1):
#             if page == 1:
#               section_url = i
#             else:
#               section_url = i + 'page/' + str(page)
#             req_section_url = requests.get(section_url, headers = header)
#             soup_section_url = BeautifulSoup(req_section_url.content)
          
#             articles = soup_section_url.find_all('article')
#             for article in articles:
#               link = article.find('a')['href']
#               sitemap_URLs.append(link)
#     return sitemap_URLs

# def sitemap_to_sitemap(sitemap, headers):
#     req = requests.get(sitemap, headers = headers)
#     soup = BeautifulSoup(req.content)
#     sitemap_to_sitemap_URLs = []

#     for i in soup.find_all("loc") :
#         if "page-sitemap" not in i.text and "post_tag" not in i.text:
#             sitemap_to_sitemap_URLs.append(i.text)
#     print('Now collected',len(sitemap_to_sitemap_URLs), 'sitemap URLs in sitemap')
#     return sitemap_to_sitemap_URLs

# def sitemap_to_section(sitemap, headers):
#     req = requests.get(sitemap, headers = headers)
#     soup = BeautifulSoup(req.content)
#     sitemap_to_section_URLs = []
#     for i in soup.find_all('loc'):
#         if not any([x in i.text for x in ["auto", "job", "sport", "lifestyle", "entertainment"]]):
#             sitemap_to_section_URLs.append(i.text)
#     print('Now collected',len(sitemap_to_section_URLs), 'section URLs in sitemap')
#     return sitemap_to_section_URLs

# def clean_url(sitemap_URLs) :
#     blpatterns = ['lifestyle/', '/sport/', '/entertainment/','/auto/', '/job/', '/uncategorized/',
#                    'religion-astrology/', 'puzzle/', 'blogger/', 'yaas/', 'business/', 'shorts/']
#     clean_urls = set()
#     for url in sitemap_URLs:
#         if url == "" or url == None:
#             continue

#         for pattern in blpatterns:
#             if pattern in url:
#                 break
#         else:
#             if not "https://www.agniban.com/" in url and not "https:" in url:
#                 url = "https://www.agniban.com/" + url
#             clean_urls.add(url)
#     print('Now collected ',len(clean_urls), ' clean inner URLs')
#     return clean_urls

# def section_to_url(section, headers):
#     section_inner_urls = set()
#     for j in range(1,663000):
#         url_to_parse = section + "page/" + str(j) + "/"
#         req = requests.get(url_to_parse, headers = headers)
#         soup = BeautifulSoup(req.content, 'html.parser')

#         if soup.find("section", {"class":"error-404 not-found"}):
#             break
#         for link in soup.find_all('a'):
#             section_inner_urls.add(link.get('href')) 
#     print('Now collected ',len(section_inner_urls), 'section inner URLs for last j: ', j)
#     return section_inner_urls

# def extract_url_information(clean_urls):
#     url_count = 0
#     final_section_incorrect_data = []
#     final_section_data = []
#     for section_clean_url in clean_urls:
#         ## SCRAPING USING NEWSPLEASE:
#         try:
#             header = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'}
#             response = requests.get(section_clean_url, headers=header)

#             # process
#             article = NewsPlease.from_html(response.text, url=section_clean_url).__dict__
#             article['date_download'] = datetime.now()
#             article['download_via'] = "LocalIND"
#             article['source_domain'] = source

#             soup = BeautifulSoup(response.content, 'html.parser')

#             extracted_data = agni_story(soup)

#             article['date_publish'] = extracted_data['date_publish']
#             article['title'] = extracted_data['title']
#             article['maintext'] = extracted_data['maintext']
#             final_section_data.append(article)
            
#             try:
#                 year = article['date_publish'].year
#                 month = article['date_publish'].month
#                 colname = f'articles-{year}-{month}'
#             except:
#                 print("NO DATE : ", section_clean_url)
#                 colname = 'articles-nodate'
#             try:
#                 url_count = url_count + 1
#                 # print(article)
#                 # Inserting article into the db:
#                 db[colname].insert_one(article)
#                 # print(" + Date: ", article['date_publish'], " + Main Text: ", article['maintext'][0:50], " + Title: ", article['title'][0:25])
#                 # print("Inserted! in ", colname, " - number of urls so far: ", url_count)
#                 db['urls'].insert_one({'url': article['url']})
#             except DuplicateKeyError:
#                 print("DUPLICATE! Not inserted for section clean url : ", section_clean_url)

#         except Exception as err:
#             print("Exception in section clean url : ", section_clean_url)
#             final_section_incorrect_data.append({'url': section_clean_url, "err": err})
#             print("ERRORRRR......", err)
#     return final_section_incorrect_data, final_section_data

# sitemap = "https://www.agniban.com/sitemap_index.xml"
# sitemap_to_sitemap_URLs = sitemap_to_sitemap(sitemap, headers)
# sitemap_URLs=[]
# for sitemap in sitemap_to_sitemap_URLs:
#     if sitemap == "https://www.agniban.com/category-sitemap.xml" or sitemap == "https://www.agniban.com/author-sitemap.xml":
#         sitemap_to_section_URLS =  sitemap_to_section(sitemap, headers)
#         for section in sitemap_to_section_URLS:
#             section_URLs = list(section_to_url(section, headers))
#             clean_urls = clean_url(section_URLs)
#             final_section_incorrect_data, final_section_data = extract_url_information(clean_urls)
#     else:
#         sitemap_URLs = sitemap_to_url(sitemap, headers)
#         clean_urls = clean_url(sitemap_URLs)
#         final_section_incorrect_data, final_section_data = extract_url_information(clean_urls)
#     print("Found " + str(len(final_section_data)) + " articles from sitemap :" + sitemap)


# headers for scraping
headers = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'}

## NEED TO DEFINE SOURCE!
source = 'agniban.com'

#################
# Custom Parser #
# Custom Parser
def agniban_story(soup):
    """
    Function to pull the information we want from indiatimes.com stories
    :param soup: BeautifulSoup object, ready to parse
    """
    hold_dict = {}

    # Get Title:
    try:
        #article_title = soup.find("title").text
        article_title = soup.find("h1", {"class":"entry-title"}).text
        hold_dict['title']  = article_title.replace('\u200b', '')

    except:
        article_title = None
        hold_dict['title']  = None

    # Get Main Text:
    try:
        maintext_contains = soup.find("div", {"class":"entry-content"}).text
        hold_dict['maintext'] = maintext_contains.replace('\u200b', '')
    except:
        maintext = None
        hold_dict['maintext']  = None


    # Get Date:
    try:
        date_contains = soup.find("time", {"class":"entry-date published updated"}).text
        date = dateparser.parse(date_contains, date_formats=['%d/%m/%Y'])
        hold_dict['date_publish'] = date
    except:
        hold_dict['date_publish'] = None

   # Get Section:
    #try:
     #   section = soup.find("div", {"class":"td_block_wrap tdb_single_content tdi_59 td-pb-border-top td_block_template_5 td-post-content tagdiv-type"}).text

      #  hold_dict['section'] = section.replace('\u200b', '')
    #except:
     #   hold_dict['section'] = None

    return hold_dict
##
#################

sections = ['/category/uncategorized/', '/district-news/zonal/', '/district-news/ujjain/', '/uttar-pradesh/', '/करियर/', '/क्राइम/', '/perfect/', '/election/', '/election-2024/', '/district-news/jabalpur/', '/jara-hat-ke/', '/district-news/','/country/', '/big-news/', '/district-news/bhopal/', '/madhya-pradesh/', '/yaas/', '/politics/', 'foreign/']
positions = [27, 100, 100, 95, 15, 50, 15, 16, 209, 235, 93, 100, 100, 100, 110, 900, 2, 250, 400 ]

for i in range(len(sections)):
    section_name = sections[i]
    page_num = positions[i]

  #print(section_page)
    for page in range(1, page_num +1):

        if page ==1:
            section_page = 'https://www.agniban.com' + section_name
        else:
            #page = (page - 1) * 20
            section_page = 'https://www.agniban.com' + section_name + "/page/" + str(page)
        print(section_page)

        reqs = requests.get(section_page, headers=headers)
        soup = BeautifulSoup(reqs.text, 'html.parser')
        #print(soup.find('div', {'id':'tdi_54'}))

        urls = []
        try:
            for link in soup.find('div', {'class':'archive-content-wrapper clearfix'}).find_all('a'):
                print(link.get('href'))
                #print(link)
                urls.append(link.get('href'))
                urls = list(set(urls))
                print("URLs so far: ",len(urls))
        except:
            pass

        print(urls)
        ## INSERTING IN THE DB:
        url_count = 0
        for url in urls:
            if url == "":
                pass
            else:
                if url == None:
                    pass
                else:
                    if "agniban.com" in url:
                        print(url, "FINE")
                        ## SCRAPING USING NEWSPLEASE:
                        try:
                            #header = {'User-Agent': ('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.36''(KHTML, like Gecko) Chrome/35.0.1916.47 Safari/537.36')}
                            header = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'}
                            response = requests.get(url, headers=header)
                            soup = BeautifulSoup(response.text, 'html.parser')

                            # process
                            article = NewsPlease.from_html(response.text, url=url).__dict__
                            # add on some extras
                            article['date_download']=datetime.now()
                            article['download_via'] = "Direct2"
                            article['title'] = agniban_story(soup)['title']
                            article['date_publish'] = agniban_story(soup)['date_publish']
                            article['maintext'] = agniban_story(soup)['maintext']

                            ## Inserting into the db
                            try:
                                year = article['date_publish'].year
                                month = article['date_publish'].month
                                colname = f'articles-{year}-{month}'
                                #print(article)
                            except:
                                colname = 'articles-nodate'
                            try:
                                #TEMP: deleting the stuff i included with the wrong domain:
                                #myquery = { "url": final_url, "source_domain" : 'web.archive.org'}
                                #db[colname].delete_one(myquery)
                                # Inserting article into the db:
                                db[colname].insert_one(article)
                                # count:
                                url_count = url_count + 1
                                print(article['date_publish'])
                                #print(article['date_publish'].month)
                                print(article['title'][0:100])
                                print(article['maintext'][0:100])
                                print("Inserted! in ", colname, " - number of urls so far: ", url_count)
                                db['urls'].insert_one({'url': article['url']})
                            except DuplicateKeyError:
                                print("DUPLICATE! Not inserted.")
                        except Exception as err:
                            print("ERRORRRR......", err)
                            pass
                    else:
                        pass


        #print("Done inserting ", url_count, " manually collected urls from ",  source, " into the db.")

